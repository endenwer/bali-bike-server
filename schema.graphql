type Query {
  bikes(
    first: Int!
    skip: Int!
    startDate: String
    endDate: String): [Bike!]
  ownBikes: [Bike!]
  savedBikes: [Bike!]
  bike(id: ID!): Bike
  bookings: [Booking!]!
  booking(id: ID!): Booking
}

type Mutation {
  addBikeToSaved(bikeId: String!): SavedBikesList
  removeBikeFromSaved(bikeId: String!): SavedBikesList
  createBooking(
    startDate: String!
    endDate: String!
    deliveryLocationLongitude: String!
    deliveryLocationLongitudeDelta: String!
    deliveryLocationLatitude: String!
    deliveryLocationLatitudeDelta: String!
    deliveryLocationAddress: String!
    deliveryLocationComment: String
    bikeId: ID!): Booking
  createBike(
    modelId: Int!
    photos: [String!]!
    areaIds: [Int!]!
    manufactureYear: Int!
    mileage: Int!
    dailyPrice: Int!
    monthlyPrice: Int!
  ): Bike
  updateBike(
    id: ID!
    photos: [String!]!
    areaIds: [Int!]!
    mileage: Int!
    dailyPrice: Int!
    monthlyPrice: Int!
  ): Bike
  deleteBike(id: ID!): Bike
  changeRole(role: String): Boolean
}

type User {
  uid: String!
  name: String!
  photoURL: String
}

type Bike {
  id: ID!
  ownerUid: String!
  modelId: Int!
  photos: [String!]
  areaIds: [Int!]
  rating: Float
  reviewsCount: Int
  manufactureYear: Int
  mileage: Int
  dailyPrice: Int!
  monthlyPrice: Int!
  saved: Boolean
  reviews: [Review!]!
  owner: User!
}

type Review {
  id: ID!
  rating: Int!
  comment: String
}

type SavedBikesList {
  userUid: String!
  bikes: [String!]
}

enum BookingStatus {
  WAITING_CONFIRMATION
  CONFIRMED
  CANCELED
}

type Booking {
  id: ID!
  userUid: String!
  startDate: String!
  endDate: String!
  deliveryLocationLongitude: String!
  deliveryLocationLongitudeDelta: String!
  deliveryLocationLatitude: String!
  deliveryLocationLatitudeDelta: String!
  deliveryLocationAddress: String!
  deliveryLocationComment: String
  dailyPrice: Int!
  monthlyPrice: Int!
  totalPrice: Int!
  status: BookingStatus!
  bike: Bike!
  user: User!
}
