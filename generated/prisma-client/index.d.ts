// Code generated by Prisma (prisma@1.23.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  bike: (where?: BikeWhereInput) => Promise<boolean>;
  booking: (where?: BookingWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bike: (where: BikeWhereUniqueInput) => BikePromise;
  bikes: (
    args?: {
      where?: BikeWhereInput;
      orderBy?: BikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Bike>;
  bikesConnection: (
    args?: {
      where?: BikeWhereInput;
      orderBy?: BikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BikeConnectionPromise;
  booking: (where: BookingWhereUniqueInput) => BookingPromise;
  bookings: (
    args?: {
      where?: BookingWhereInput;
      orderBy?: BookingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Booking>;
  bookingsConnection: (
    args?: {
      where?: BookingWhereInput;
      orderBy?: BookingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BookingConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewPromise;
  reviews: (
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Review>;
  reviewsConnection: (
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReviewConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBike: (data: BikeCreateInput) => BikePromise;
  updateBike: (
    args: { data: BikeUpdateInput; where: BikeWhereUniqueInput }
  ) => BikePromise;
  updateManyBikes: (
    args: { data: BikeUpdateManyMutationInput; where?: BikeWhereInput }
  ) => BatchPayloadPromise;
  upsertBike: (
    args: {
      where: BikeWhereUniqueInput;
      create: BikeCreateInput;
      update: BikeUpdateInput;
    }
  ) => BikePromise;
  deleteBike: (where: BikeWhereUniqueInput) => BikePromise;
  deleteManyBikes: (where?: BikeWhereInput) => BatchPayloadPromise;
  createBooking: (data: BookingCreateInput) => BookingPromise;
  updateBooking: (
    args: { data: BookingUpdateInput; where: BookingWhereUniqueInput }
  ) => BookingPromise;
  updateManyBookings: (
    args: { data: BookingUpdateManyMutationInput; where?: BookingWhereInput }
  ) => BatchPayloadPromise;
  upsertBooking: (
    args: {
      where: BookingWhereUniqueInput;
      create: BookingCreateInput;
      update: BookingUpdateInput;
    }
  ) => BookingPromise;
  deleteBooking: (where: BookingWhereUniqueInput) => BookingPromise;
  deleteManyBookings: (where?: BookingWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (
    args: { data: ReviewUpdateInput; where: ReviewWhereUniqueInput }
  ) => ReviewPromise;
  updateManyReviews: (
    args: { data: ReviewUpdateManyMutationInput; where?: ReviewWhereInput }
  ) => BatchPayloadPromise;
  upsertReview: (
    args: {
      where: ReviewWhereUniqueInput;
      create: ReviewCreateInput;
      update: ReviewUpdateInput;
    }
  ) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bike: (
    where?: BikeSubscriptionWhereInput
  ) => BikeSubscriptionPayloadSubscription;
  booking: (
    where?: BookingSubscriptionWhereInput
  ) => BookingSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BookingStatus = "WAITING_CONFIRMATION" | "CONFIRMED" | "CANCELED";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "userUid_ASC"
  | "userUid_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BookingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userUid_ASC"
  | "userUid_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "deliveryLocationLongitude_ASC"
  | "deliveryLocationLongitude_DESC"
  | "deliveryLocationLongitudeDelta_ASC"
  | "deliveryLocationLongitudeDelta_DESC"
  | "deliveryLocationLatitude_ASC"
  | "deliveryLocationLatitude_DESC"
  | "deliveryLocationLatitudeDelta_ASC"
  | "deliveryLocationLatitudeDelta_DESC"
  | "deliveryLocationAddress_ASC"
  | "deliveryLocationAddress_DESC"
  | "deliveryLocationComment_ASC"
  | "deliveryLocationComment_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "modelId_ASC"
  | "modelId_DESC"
  | "price_ASC"
  | "price_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "reviewsCount_ASC"
  | "reviewsCount_DESC"
  | "manufactureYear_ASC"
  | "manufactureYear_DESC"
  | "mileage_ASC"
  | "mileage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ReviewUpdateWithoutBikeDataInput {
  rating?: Int;
  comment?: String;
  userUid?: String;
}

export type BikeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BikeCreatephotosInput {
  set?: String[] | String;
}

export interface BookingCreateInput {
  userUid: String;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  deliveryLocationLongitude: String;
  deliveryLocationLongitudeDelta: String;
  deliveryLocationLatitude: String;
  deliveryLocationLatitudeDelta: String;
  deliveryLocationAddress: String;
  deliveryLocationComment?: String;
  status?: BookingStatus;
  bike: BikeCreateOneWithoutBookingsInput;
}

export interface ReviewCreateManyWithoutBikeInput {
  create?: ReviewCreateWithoutBikeInput[] | ReviewCreateWithoutBikeInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
}

export interface ReviewUpdateManyDataInput {
  rating?: Int;
  comment?: String;
  userUid?: String;
}

export interface ReviewCreateWithoutBikeInput {
  rating: Int;
  comment?: String;
  userUid: String;
}

export interface ReviewWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  userUid?: String;
  userUid_not?: String;
  userUid_in?: String[] | String;
  userUid_not_in?: String[] | String;
  userUid_lt?: String;
  userUid_lte?: String;
  userUid_gt?: String;
  userUid_gte?: String;
  userUid_contains?: String;
  userUid_not_contains?: String;
  userUid_starts_with?: String;
  userUid_not_starts_with?: String;
  userUid_ends_with?: String;
  userUid_not_ends_with?: String;
  bike?: BikeWhereInput;
  AND?: ReviewWhereInput[] | ReviewWhereInput;
  OR?: ReviewWhereInput[] | ReviewWhereInput;
  NOT?: ReviewWhereInput[] | ReviewWhereInput;
}

export interface BookingCreateManyWithoutBikeInput {
  create?: BookingCreateWithoutBikeInput[] | BookingCreateWithoutBikeInput;
  connect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput;
}

export interface BookingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BookingWhereInput;
  AND?: BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput;
  OR?: BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput;
  NOT?: BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput;
}

export interface BookingCreateWithoutBikeInput {
  userUid: String;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  deliveryLocationLongitude: String;
  deliveryLocationLongitudeDelta: String;
  deliveryLocationLatitude: String;
  deliveryLocationLatitudeDelta: String;
  deliveryLocationAddress: String;
  deliveryLocationComment?: String;
  status?: BookingStatus;
}

export interface ReviewUpdateManyMutationInput {
  rating?: Int;
  comment?: String;
  userUid?: String;
}

export interface BikeUpdateInput {
  modelId?: Int;
  price?: Int;
  photos?: BikeUpdatephotosInput;
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
  reviews?: ReviewUpdateManyWithoutBikeInput;
  bookings?: BookingUpdateManyWithoutBikeInput;
}

export interface BikeUpdateWithoutReviewsDataInput {
  modelId?: Int;
  price?: Int;
  photos?: BikeUpdatephotosInput;
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
  bookings?: BookingUpdateManyWithoutBikeInput;
}

export interface BikeUpdatephotosInput {
  set?: String[] | String;
}

export interface ReviewUpdateInput {
  rating?: Int;
  comment?: String;
  userUid?: String;
  bike?: BikeUpdateOneRequiredWithoutReviewsInput;
}

export interface ReviewUpdateManyWithoutBikeInput {
  create?: ReviewCreateWithoutBikeInput[] | ReviewCreateWithoutBikeInput;
  delete?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  disconnect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  update?:
    | ReviewUpdateWithWhereUniqueWithoutBikeInput[]
    | ReviewUpdateWithWhereUniqueWithoutBikeInput;
  upsert?:
    | ReviewUpsertWithWhereUniqueWithoutBikeInput[]
    | ReviewUpsertWithWhereUniqueWithoutBikeInput;
  deleteMany?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  updateMany?:
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput;
}

export interface BikeCreateOneWithoutReviewsInput {
  create?: BikeCreateWithoutReviewsInput;
  connect?: BikeWhereUniqueInput;
}

export interface ReviewUpdateWithWhereUniqueWithoutBikeInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutBikeDataInput;
}

export interface ReviewCreateInput {
  rating: Int;
  comment?: String;
  userUid: String;
  bike: BikeCreateOneWithoutReviewsInput;
}

export interface BikeCreateWithoutBookingsInput {
  modelId: Int;
  price: Int;
  photos?: BikeCreatephotosInput;
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
  reviews?: ReviewCreateManyWithoutBikeInput;
}

export interface BikeUpsertWithoutBookingsInput {
  update: BikeUpdateWithoutBookingsDataInput;
  create: BikeCreateWithoutBookingsInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutBikeInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutBikeDataInput;
  create: ReviewCreateWithoutBikeInput;
}

export interface BikeUpdateWithoutBookingsDataInput {
  modelId?: Int;
  price?: Int;
  photos?: BikeUpdatephotosInput;
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
  reviews?: ReviewUpdateManyWithoutBikeInput;
}

export interface ReviewScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  userUid?: String;
  userUid_not?: String;
  userUid_in?: String[] | String;
  userUid_not_in?: String[] | String;
  userUid_lt?: String;
  userUid_lte?: String;
  userUid_gt?: String;
  userUid_gte?: String;
  userUid_contains?: String;
  userUid_not_contains?: String;
  userUid_starts_with?: String;
  userUid_not_starts_with?: String;
  userUid_ends_with?: String;
  userUid_not_ends_with?: String;
  AND?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  OR?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  NOT?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
}

export interface BookingUpdateInput {
  userUid?: String;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  deliveryLocationLongitude?: String;
  deliveryLocationLongitudeDelta?: String;
  deliveryLocationLatitude?: String;
  deliveryLocationLatitudeDelta?: String;
  deliveryLocationAddress?: String;
  deliveryLocationComment?: String;
  status?: BookingStatus;
  bike?: BikeUpdateOneRequiredWithoutBookingsInput;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface BikeCreateInput {
  modelId: Int;
  price: Int;
  photos?: BikeCreatephotosInput;
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
  reviews?: ReviewCreateManyWithoutBikeInput;
  bookings?: BookingCreateManyWithoutBikeInput;
}

export interface BikeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  modelId?: Int;
  modelId_not?: Int;
  modelId_in?: Int[] | Int;
  modelId_not_in?: Int[] | Int;
  modelId_lt?: Int;
  modelId_lte?: Int;
  modelId_gt?: Int;
  modelId_gte?: Int;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  rating?: Float;
  rating_not?: Float;
  rating_in?: Float[] | Float;
  rating_not_in?: Float[] | Float;
  rating_lt?: Float;
  rating_lte?: Float;
  rating_gt?: Float;
  rating_gte?: Float;
  reviewsCount?: Int;
  reviewsCount_not?: Int;
  reviewsCount_in?: Int[] | Int;
  reviewsCount_not_in?: Int[] | Int;
  reviewsCount_lt?: Int;
  reviewsCount_lte?: Int;
  reviewsCount_gt?: Int;
  reviewsCount_gte?: Int;
  manufactureYear?: Int;
  manufactureYear_not?: Int;
  manufactureYear_in?: Int[] | Int;
  manufactureYear_not_in?: Int[] | Int;
  manufactureYear_lt?: Int;
  manufactureYear_lte?: Int;
  manufactureYear_gt?: Int;
  manufactureYear_gte?: Int;
  mileage?: Int;
  mileage_not?: Int;
  mileage_in?: Int[] | Int;
  mileage_not_in?: Int[] | Int;
  mileage_lt?: Int;
  mileage_lte?: Int;
  mileage_gt?: Int;
  mileage_gte?: Int;
  reviews_every?: ReviewWhereInput;
  reviews_some?: ReviewWhereInput;
  reviews_none?: ReviewWhereInput;
  bookings_every?: BookingWhereInput;
  bookings_some?: BookingWhereInput;
  bookings_none?: BookingWhereInput;
  AND?: BikeWhereInput[] | BikeWhereInput;
  OR?: BikeWhereInput[] | BikeWhereInput;
  NOT?: BikeWhereInput[] | BikeWhereInput;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReviewWhereInput;
  AND?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
  OR?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
  NOT?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
}

export interface BookingUpdateManyWithoutBikeInput {
  create?: BookingCreateWithoutBikeInput[] | BookingCreateWithoutBikeInput;
  delete?: BookingWhereUniqueInput[] | BookingWhereUniqueInput;
  connect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput;
  disconnect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput;
  update?:
    | BookingUpdateWithWhereUniqueWithoutBikeInput[]
    | BookingUpdateWithWhereUniqueWithoutBikeInput;
  upsert?:
    | BookingUpsertWithWhereUniqueWithoutBikeInput[]
    | BookingUpsertWithWhereUniqueWithoutBikeInput;
  deleteMany?: BookingScalarWhereInput[] | BookingScalarWhereInput;
  updateMany?:
    | BookingUpdateManyWithWhereNestedInput[]
    | BookingUpdateManyWithWhereNestedInput;
}

export interface BikeUpsertWithoutReviewsInput {
  update: BikeUpdateWithoutReviewsDataInput;
  create: BikeCreateWithoutReviewsInput;
}

export interface BookingUpdateWithWhereUniqueWithoutBikeInput {
  where: BookingWhereUniqueInput;
  data: BookingUpdateWithoutBikeDataInput;
}

export interface BikeCreateWithoutReviewsInput {
  modelId: Int;
  price: Int;
  photos?: BikeCreatephotosInput;
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
  bookings?: BookingCreateManyWithoutBikeInput;
}

export interface BookingUpdateWithoutBikeDataInput {
  userUid?: String;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  deliveryLocationLongitude?: String;
  deliveryLocationLongitudeDelta?: String;
  deliveryLocationLatitude?: String;
  deliveryLocationLatitudeDelta?: String;
  deliveryLocationAddress?: String;
  deliveryLocationComment?: String;
  status?: BookingStatus;
}

export interface BookingUpdateManyMutationInput {
  userUid?: String;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  deliveryLocationLongitude?: String;
  deliveryLocationLongitudeDelta?: String;
  deliveryLocationLatitude?: String;
  deliveryLocationLatitudeDelta?: String;
  deliveryLocationAddress?: String;
  deliveryLocationComment?: String;
  status?: BookingStatus;
}

export interface BookingUpsertWithWhereUniqueWithoutBikeInput {
  where: BookingWhereUniqueInput;
  update: BookingUpdateWithoutBikeDataInput;
  create: BookingCreateWithoutBikeInput;
}

export interface BikeUpdateOneRequiredWithoutBookingsInput {
  create?: BikeCreateWithoutBookingsInput;
  update?: BikeUpdateWithoutBookingsDataInput;
  upsert?: BikeUpsertWithoutBookingsInput;
  connect?: BikeWhereUniqueInput;
}

export interface BookingScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userUid?: String;
  userUid_not?: String;
  userUid_in?: String[] | String;
  userUid_not_in?: String[] | String;
  userUid_lt?: String;
  userUid_lte?: String;
  userUid_gt?: String;
  userUid_gte?: String;
  userUid_contains?: String;
  userUid_not_contains?: String;
  userUid_starts_with?: String;
  userUid_not_starts_with?: String;
  userUid_ends_with?: String;
  userUid_not_ends_with?: String;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  endDate?: DateTimeInput;
  endDate_not?: DateTimeInput;
  endDate_in?: DateTimeInput[] | DateTimeInput;
  endDate_not_in?: DateTimeInput[] | DateTimeInput;
  endDate_lt?: DateTimeInput;
  endDate_lte?: DateTimeInput;
  endDate_gt?: DateTimeInput;
  endDate_gte?: DateTimeInput;
  deliveryLocationLongitude?: String;
  deliveryLocationLongitude_not?: String;
  deliveryLocationLongitude_in?: String[] | String;
  deliveryLocationLongitude_not_in?: String[] | String;
  deliveryLocationLongitude_lt?: String;
  deliveryLocationLongitude_lte?: String;
  deliveryLocationLongitude_gt?: String;
  deliveryLocationLongitude_gte?: String;
  deliveryLocationLongitude_contains?: String;
  deliveryLocationLongitude_not_contains?: String;
  deliveryLocationLongitude_starts_with?: String;
  deliveryLocationLongitude_not_starts_with?: String;
  deliveryLocationLongitude_ends_with?: String;
  deliveryLocationLongitude_not_ends_with?: String;
  deliveryLocationLongitudeDelta?: String;
  deliveryLocationLongitudeDelta_not?: String;
  deliveryLocationLongitudeDelta_in?: String[] | String;
  deliveryLocationLongitudeDelta_not_in?: String[] | String;
  deliveryLocationLongitudeDelta_lt?: String;
  deliveryLocationLongitudeDelta_lte?: String;
  deliveryLocationLongitudeDelta_gt?: String;
  deliveryLocationLongitudeDelta_gte?: String;
  deliveryLocationLongitudeDelta_contains?: String;
  deliveryLocationLongitudeDelta_not_contains?: String;
  deliveryLocationLongitudeDelta_starts_with?: String;
  deliveryLocationLongitudeDelta_not_starts_with?: String;
  deliveryLocationLongitudeDelta_ends_with?: String;
  deliveryLocationLongitudeDelta_not_ends_with?: String;
  deliveryLocationLatitude?: String;
  deliveryLocationLatitude_not?: String;
  deliveryLocationLatitude_in?: String[] | String;
  deliveryLocationLatitude_not_in?: String[] | String;
  deliveryLocationLatitude_lt?: String;
  deliveryLocationLatitude_lte?: String;
  deliveryLocationLatitude_gt?: String;
  deliveryLocationLatitude_gte?: String;
  deliveryLocationLatitude_contains?: String;
  deliveryLocationLatitude_not_contains?: String;
  deliveryLocationLatitude_starts_with?: String;
  deliveryLocationLatitude_not_starts_with?: String;
  deliveryLocationLatitude_ends_with?: String;
  deliveryLocationLatitude_not_ends_with?: String;
  deliveryLocationLatitudeDelta?: String;
  deliveryLocationLatitudeDelta_not?: String;
  deliveryLocationLatitudeDelta_in?: String[] | String;
  deliveryLocationLatitudeDelta_not_in?: String[] | String;
  deliveryLocationLatitudeDelta_lt?: String;
  deliveryLocationLatitudeDelta_lte?: String;
  deliveryLocationLatitudeDelta_gt?: String;
  deliveryLocationLatitudeDelta_gte?: String;
  deliveryLocationLatitudeDelta_contains?: String;
  deliveryLocationLatitudeDelta_not_contains?: String;
  deliveryLocationLatitudeDelta_starts_with?: String;
  deliveryLocationLatitudeDelta_not_starts_with?: String;
  deliveryLocationLatitudeDelta_ends_with?: String;
  deliveryLocationLatitudeDelta_not_ends_with?: String;
  deliveryLocationAddress?: String;
  deliveryLocationAddress_not?: String;
  deliveryLocationAddress_in?: String[] | String;
  deliveryLocationAddress_not_in?: String[] | String;
  deliveryLocationAddress_lt?: String;
  deliveryLocationAddress_lte?: String;
  deliveryLocationAddress_gt?: String;
  deliveryLocationAddress_gte?: String;
  deliveryLocationAddress_contains?: String;
  deliveryLocationAddress_not_contains?: String;
  deliveryLocationAddress_starts_with?: String;
  deliveryLocationAddress_not_starts_with?: String;
  deliveryLocationAddress_ends_with?: String;
  deliveryLocationAddress_not_ends_with?: String;
  deliveryLocationComment?: String;
  deliveryLocationComment_not?: String;
  deliveryLocationComment_in?: String[] | String;
  deliveryLocationComment_not_in?: String[] | String;
  deliveryLocationComment_lt?: String;
  deliveryLocationComment_lte?: String;
  deliveryLocationComment_gt?: String;
  deliveryLocationComment_gte?: String;
  deliveryLocationComment_contains?: String;
  deliveryLocationComment_not_contains?: String;
  deliveryLocationComment_starts_with?: String;
  deliveryLocationComment_not_starts_with?: String;
  deliveryLocationComment_ends_with?: String;
  deliveryLocationComment_not_ends_with?: String;
  status?: BookingStatus;
  status_not?: BookingStatus;
  status_in?: BookingStatus[] | BookingStatus;
  status_not_in?: BookingStatus[] | BookingStatus;
  AND?: BookingScalarWhereInput[] | BookingScalarWhereInput;
  OR?: BookingScalarWhereInput[] | BookingScalarWhereInput;
  NOT?: BookingScalarWhereInput[] | BookingScalarWhereInput;
}

export interface BookingWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userUid?: String;
  userUid_not?: String;
  userUid_in?: String[] | String;
  userUid_not_in?: String[] | String;
  userUid_lt?: String;
  userUid_lte?: String;
  userUid_gt?: String;
  userUid_gte?: String;
  userUid_contains?: String;
  userUid_not_contains?: String;
  userUid_starts_with?: String;
  userUid_not_starts_with?: String;
  userUid_ends_with?: String;
  userUid_not_ends_with?: String;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  endDate?: DateTimeInput;
  endDate_not?: DateTimeInput;
  endDate_in?: DateTimeInput[] | DateTimeInput;
  endDate_not_in?: DateTimeInput[] | DateTimeInput;
  endDate_lt?: DateTimeInput;
  endDate_lte?: DateTimeInput;
  endDate_gt?: DateTimeInput;
  endDate_gte?: DateTimeInput;
  deliveryLocationLongitude?: String;
  deliveryLocationLongitude_not?: String;
  deliveryLocationLongitude_in?: String[] | String;
  deliveryLocationLongitude_not_in?: String[] | String;
  deliveryLocationLongitude_lt?: String;
  deliveryLocationLongitude_lte?: String;
  deliveryLocationLongitude_gt?: String;
  deliveryLocationLongitude_gte?: String;
  deliveryLocationLongitude_contains?: String;
  deliveryLocationLongitude_not_contains?: String;
  deliveryLocationLongitude_starts_with?: String;
  deliveryLocationLongitude_not_starts_with?: String;
  deliveryLocationLongitude_ends_with?: String;
  deliveryLocationLongitude_not_ends_with?: String;
  deliveryLocationLongitudeDelta?: String;
  deliveryLocationLongitudeDelta_not?: String;
  deliveryLocationLongitudeDelta_in?: String[] | String;
  deliveryLocationLongitudeDelta_not_in?: String[] | String;
  deliveryLocationLongitudeDelta_lt?: String;
  deliveryLocationLongitudeDelta_lte?: String;
  deliveryLocationLongitudeDelta_gt?: String;
  deliveryLocationLongitudeDelta_gte?: String;
  deliveryLocationLongitudeDelta_contains?: String;
  deliveryLocationLongitudeDelta_not_contains?: String;
  deliveryLocationLongitudeDelta_starts_with?: String;
  deliveryLocationLongitudeDelta_not_starts_with?: String;
  deliveryLocationLongitudeDelta_ends_with?: String;
  deliveryLocationLongitudeDelta_not_ends_with?: String;
  deliveryLocationLatitude?: String;
  deliveryLocationLatitude_not?: String;
  deliveryLocationLatitude_in?: String[] | String;
  deliveryLocationLatitude_not_in?: String[] | String;
  deliveryLocationLatitude_lt?: String;
  deliveryLocationLatitude_lte?: String;
  deliveryLocationLatitude_gt?: String;
  deliveryLocationLatitude_gte?: String;
  deliveryLocationLatitude_contains?: String;
  deliveryLocationLatitude_not_contains?: String;
  deliveryLocationLatitude_starts_with?: String;
  deliveryLocationLatitude_not_starts_with?: String;
  deliveryLocationLatitude_ends_with?: String;
  deliveryLocationLatitude_not_ends_with?: String;
  deliveryLocationLatitudeDelta?: String;
  deliveryLocationLatitudeDelta_not?: String;
  deliveryLocationLatitudeDelta_in?: String[] | String;
  deliveryLocationLatitudeDelta_not_in?: String[] | String;
  deliveryLocationLatitudeDelta_lt?: String;
  deliveryLocationLatitudeDelta_lte?: String;
  deliveryLocationLatitudeDelta_gt?: String;
  deliveryLocationLatitudeDelta_gte?: String;
  deliveryLocationLatitudeDelta_contains?: String;
  deliveryLocationLatitudeDelta_not_contains?: String;
  deliveryLocationLatitudeDelta_starts_with?: String;
  deliveryLocationLatitudeDelta_not_starts_with?: String;
  deliveryLocationLatitudeDelta_ends_with?: String;
  deliveryLocationLatitudeDelta_not_ends_with?: String;
  deliveryLocationAddress?: String;
  deliveryLocationAddress_not?: String;
  deliveryLocationAddress_in?: String[] | String;
  deliveryLocationAddress_not_in?: String[] | String;
  deliveryLocationAddress_lt?: String;
  deliveryLocationAddress_lte?: String;
  deliveryLocationAddress_gt?: String;
  deliveryLocationAddress_gte?: String;
  deliveryLocationAddress_contains?: String;
  deliveryLocationAddress_not_contains?: String;
  deliveryLocationAddress_starts_with?: String;
  deliveryLocationAddress_not_starts_with?: String;
  deliveryLocationAddress_ends_with?: String;
  deliveryLocationAddress_not_ends_with?: String;
  deliveryLocationComment?: String;
  deliveryLocationComment_not?: String;
  deliveryLocationComment_in?: String[] | String;
  deliveryLocationComment_not_in?: String[] | String;
  deliveryLocationComment_lt?: String;
  deliveryLocationComment_lte?: String;
  deliveryLocationComment_gt?: String;
  deliveryLocationComment_gte?: String;
  deliveryLocationComment_contains?: String;
  deliveryLocationComment_not_contains?: String;
  deliveryLocationComment_starts_with?: String;
  deliveryLocationComment_not_starts_with?: String;
  deliveryLocationComment_ends_with?: String;
  deliveryLocationComment_not_ends_with?: String;
  status?: BookingStatus;
  status_not?: BookingStatus;
  status_in?: BookingStatus[] | BookingStatus;
  status_not_in?: BookingStatus[] | BookingStatus;
  bike?: BikeWhereInput;
  AND?: BookingWhereInput[] | BookingWhereInput;
  OR?: BookingWhereInput[] | BookingWhereInput;
  NOT?: BookingWhereInput[] | BookingWhereInput;
}

export interface BikeUpdateOneRequiredWithoutReviewsInput {
  create?: BikeCreateWithoutReviewsInput;
  update?: BikeUpdateWithoutReviewsDataInput;
  upsert?: BikeUpsertWithoutReviewsInput;
  connect?: BikeWhereUniqueInput;
}

export interface BikeCreateOneWithoutBookingsInput {
  create?: BikeCreateWithoutBookingsInput;
  connect?: BikeWhereUniqueInput;
}

export interface BikeUpdateManyMutationInput {
  modelId?: Int;
  price?: Int;
  photos?: BikeUpdatephotosInput;
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
}

export interface BookingUpdateManyDataInput {
  userUid?: String;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  deliveryLocationLongitude?: String;
  deliveryLocationLongitudeDelta?: String;
  deliveryLocationLatitude?: String;
  deliveryLocationLatitudeDelta?: String;
  deliveryLocationAddress?: String;
  deliveryLocationComment?: String;
  status?: BookingStatus;
}

export interface BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput;
  data: BookingUpdateManyDataInput;
}

export type BookingWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BikeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BikeWhereInput;
  AND?: BikeSubscriptionWhereInput[] | BikeSubscriptionWhereInput;
  OR?: BikeSubscriptionWhereInput[] | BikeSubscriptionWhereInput;
  NOT?: BikeSubscriptionWhereInput[] | BikeSubscriptionWhereInput;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  rating: Int;
  comment?: String;
  createdAt: DateTimeOutput;
  userUid: String;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  userUid: () => Promise<String>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userUid: () => Promise<AsyncIterator<String>>;
}

export interface BikeEdge {
  node: Bike;
  cursor: String;
}

export interface BikeEdgePromise extends Promise<BikeEdge>, Fragmentable {
  node: <T = BikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface BikeEdgeSubscription
  extends Promise<AsyncIterator<BikeEdge>>,
    Fragmentable {
  node: <T = BikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BikePreviousValues {
  id: ID_Output;
  modelId: Int;
  price: Int;
  photos: String[];
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
}

export interface BikePreviousValuesPromise
  extends Promise<BikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  modelId: () => Promise<Int>;
  price: () => Promise<Int>;
  photos: () => Promise<String[]>;
  rating: () => Promise<Float>;
  reviewsCount: () => Promise<Int>;
  manufactureYear: () => Promise<Int>;
  mileage: () => Promise<Int>;
}

export interface BikePreviousValuesSubscription
  extends Promise<AsyncIterator<BikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  modelId: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  photos: () => Promise<AsyncIterator<String[]>>;
  rating: () => Promise<AsyncIterator<Float>>;
  reviewsCount: () => Promise<AsyncIterator<Int>>;
  manufactureYear: () => Promise<AsyncIterator<Int>>;
  mileage: () => Promise<AsyncIterator<Int>>;
}

export interface BookingPreviousValues {
  id: ID_Output;
  userUid: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  deliveryLocationLongitude: String;
  deliveryLocationLongitudeDelta: String;
  deliveryLocationLatitude: String;
  deliveryLocationLatitudeDelta: String;
  deliveryLocationAddress: String;
  deliveryLocationComment?: String;
  status: BookingStatus;
}

export interface BookingPreviousValuesPromise
  extends Promise<BookingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userUid: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  deliveryLocationLongitude: () => Promise<String>;
  deliveryLocationLongitudeDelta: () => Promise<String>;
  deliveryLocationLatitude: () => Promise<String>;
  deliveryLocationLatitudeDelta: () => Promise<String>;
  deliveryLocationAddress: () => Promise<String>;
  deliveryLocationComment: () => Promise<String>;
  status: () => Promise<BookingStatus>;
}

export interface BookingPreviousValuesSubscription
  extends Promise<AsyncIterator<BookingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userUid: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  deliveryLocationLongitude: () => Promise<AsyncIterator<String>>;
  deliveryLocationLongitudeDelta: () => Promise<AsyncIterator<String>>;
  deliveryLocationLatitude: () => Promise<AsyncIterator<String>>;
  deliveryLocationLatitudeDelta: () => Promise<AsyncIterator<String>>;
  deliveryLocationAddress: () => Promise<AsyncIterator<String>>;
  deliveryLocationComment: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<BookingStatus>>;
}

export interface BikeConnection {
  pageInfo: PageInfo;
  edges: BikeEdge[];
}

export interface BikeConnectionPromise
  extends Promise<BikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BikeEdge>>() => T;
  aggregate: <T = AggregateBikePromise>() => T;
}

export interface BikeConnectionSubscription
  extends Promise<AsyncIterator<BikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBikeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface BookingSubscriptionPayload {
  mutation: MutationType;
  node: Booking;
  updatedFields: String[];
  previousValues: BookingPreviousValues;
}

export interface BookingSubscriptionPayloadPromise
  extends Promise<BookingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookingPreviousValuesPromise>() => T;
}

export interface BookingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookingPreviousValuesSubscription>() => T;
}

export interface BookingEdge {
  node: Booking;
  cursor: String;
}

export interface BookingEdgePromise extends Promise<BookingEdge>, Fragmentable {
  node: <T = BookingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookingEdgeSubscription
  extends Promise<AsyncIterator<BookingEdge>>,
    Fragmentable {
  node: <T = BookingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBike {
  count: Int;
}

export interface AggregateBikePromise
  extends Promise<AggregateBike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBikeSubscription
  extends Promise<AsyncIterator<AggregateBike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BikeSubscriptionPayload {
  mutation: MutationType;
  node: Bike;
  updatedFields: String[];
  previousValues: BikePreviousValues;
}

export interface BikeSubscriptionPayloadPromise
  extends Promise<BikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BikePreviousValuesPromise>() => T;
}

export interface BikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BikePreviousValuesSubscription>() => T;
}

export interface Bike {
  id: ID_Output;
  modelId: Int;
  price: Int;
  photos: String[];
  rating?: Float;
  reviewsCount?: Int;
  manufactureYear?: Int;
  mileage?: Int;
}

export interface BikePromise extends Promise<Bike>, Fragmentable {
  id: () => Promise<ID_Output>;
  modelId: () => Promise<Int>;
  price: () => Promise<Int>;
  photos: () => Promise<String[]>;
  rating: () => Promise<Float>;
  reviewsCount: () => Promise<Int>;
  manufactureYear: () => Promise<Int>;
  mileage: () => Promise<Int>;
  reviews: <T = FragmentableArray<Review>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bookings: <T = FragmentableArray<Booking>>(
    args?: {
      where?: BookingWhereInput;
      orderBy?: BookingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BikeSubscription
  extends Promise<AsyncIterator<Bike>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  modelId: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  photos: () => Promise<AsyncIterator<String[]>>;
  rating: () => Promise<AsyncIterator<Float>>;
  reviewsCount: () => Promise<AsyncIterator<Int>>;
  manufactureYear: () => Promise<AsyncIterator<Int>>;
  mileage: () => Promise<AsyncIterator<Int>>;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bookings: <T = Promise<AsyncIterator<BookingSubscription>>>(
    args?: {
      where?: BookingWhereInput;
      orderBy?: BookingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Review {
  id: ID_Output;
  rating: Int;
  comment?: String;
  createdAt: DateTimeOutput;
  userUid: String;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  userUid: () => Promise<String>;
  bike: <T = BikePromise>() => T;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userUid: () => Promise<AsyncIterator<String>>;
  bike: <T = BikeSubscription>() => T;
}

export interface Booking {
  id: ID_Output;
  userUid: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  deliveryLocationLongitude: String;
  deliveryLocationLongitudeDelta: String;
  deliveryLocationLatitude: String;
  deliveryLocationLatitudeDelta: String;
  deliveryLocationAddress: String;
  deliveryLocationComment?: String;
  status: BookingStatus;
}

export interface BookingPromise extends Promise<Booking>, Fragmentable {
  id: () => Promise<ID_Output>;
  userUid: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  deliveryLocationLongitude: () => Promise<String>;
  deliveryLocationLongitudeDelta: () => Promise<String>;
  deliveryLocationLatitude: () => Promise<String>;
  deliveryLocationLatitudeDelta: () => Promise<String>;
  deliveryLocationAddress: () => Promise<String>;
  deliveryLocationComment: () => Promise<String>;
  status: () => Promise<BookingStatus>;
  bike: <T = BikePromise>() => T;
}

export interface BookingSubscription
  extends Promise<AsyncIterator<Booking>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userUid: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  deliveryLocationLongitude: () => Promise<AsyncIterator<String>>;
  deliveryLocationLongitudeDelta: () => Promise<AsyncIterator<String>>;
  deliveryLocationLatitude: () => Promise<AsyncIterator<String>>;
  deliveryLocationLatitudeDelta: () => Promise<AsyncIterator<String>>;
  deliveryLocationAddress: () => Promise<AsyncIterator<String>>;
  deliveryLocationComment: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<BookingStatus>>;
  bike: <T = BikeSubscription>() => T;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface BookingConnection {
  pageInfo: PageInfo;
  edges: BookingEdge[];
}

export interface BookingConnectionPromise
  extends Promise<BookingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookingEdge>>() => T;
  aggregate: <T = AggregateBookingPromise>() => T;
}

export interface BookingConnectionSubscription
  extends Promise<AsyncIterator<BookingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookingSubscription>() => T;
}

export interface AggregateBooking {
  count: Int;
}

export interface AggregateBookingPromise
  extends Promise<AggregateBooking>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookingSubscription
  extends Promise<AsyncIterator<AggregateBooking>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Bike",
    embedded: false
  },
  {
    name: "Booking",
    embedded: false
  },
  {
    name: "BookingStatus",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
